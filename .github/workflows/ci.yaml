name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      # 3Ô∏è‚É£ Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install --upgrade huggingface_hub

      # 5Ô∏è‚É£ Run pipeline (DVC repro)
      - name: Run pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: dvc repro

      # 6Ô∏è‚É£ Run model tests
      - name: Run model tests
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python -m unittest tests/test_model.py

      # 7Ô∏è‚É£ Promote model to production
      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python scripts/promote_model.py

      # 8Ô∏è‚É£ Run Flask app tests
      - name: Run Flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python -m unittest tests/test_flask_app.py

      # 9Ô∏è‚É£ Log in to Docker Hub
      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # üîü Build Docker image
      - name: Build Docker image
        if: success()
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/emotion2:latest .

      # 1Ô∏è‚É£1Ô∏è‚É£ Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        if: success()
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/emotion2:latest

      # 1Ô∏è‚É£2Ô∏è‚É£ Deploy Docker image to Hugging Face Space (with DAGSHUB_PAT & NLTK)
      - name: Deploy Docker image to Hugging Face Space
        if: success()
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python - <<EOF
          from huggingface_hub import HfApi
          import os

          HF_USERNAME = os.environ["HF_USERNAME"]
          HF_TOKEN = os.environ["HF_TOKEN"]
          DOCKER_HUB_USERNAME = os.environ["DOCKER_HUB_USERNAME"]
          DAGSHUB_PAT = os.environ["DAGSHUB_PAT"]
          repo_name = "my-flask-app"

          api = HfApi()

          # Create the Space if it doesn‚Äôt exist
          api.create_repo(
              repo_id=f"{HF_USERNAME}/{repo_name}",
              repo_type="space",
              space_sdk="docker",
              exist_ok=True,
              token=HF_TOKEN
          )

          # Write Dockerfile with NLTK downloads and DAGSHUB_PAT environment
          dockerfile_content = f"""
          # Dockerfile for Hugging Face
          FROM {DOCKER_HUB_USERNAME}/emotion2:latest

          # Inject DAGSHUB_PAT into container
          ENV DAGSHUB_PAT={DAGSHUB_PAT}

          # Ensure NLTK stopwords & wordnet are available
          ENV NLTK_DATA=/usr/local/share/nltk_data
          RUN python -m nltk.downloader stopwords wordnet -d /usr/local/share/nltk_data

          # Expose the port HF expects
          EXPOSE 7860

          # Start Flask app via gunicorn
          CMD ["gunicorn", "-b", "0.0.0.0:7860", "app:app"]
          """

          # Upload Dockerfile to Hugging Face Space
          api.upload_file(
              path_or_fileobj=dockerfile_content.encode("utf-8"),
              path_in_repo="Dockerfile",
              repo_id=f"{HF_USERNAME}/{repo_name}",
              repo_type="space",
              token=HF_TOKEN
          )
          EOF
